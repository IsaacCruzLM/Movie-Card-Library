{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","components/SearchBar.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","components/Header.js","App.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","rows","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","data-testid","src","alt","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovies","Promise","resolve","getMovie","movieId","find","mov","parseInt","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","EditMovie","loading","shouldRedirect","match","params","movieAPI","then","res","MovieDetails","SearchBar","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","action","name","checked","MovieList","fullList","handleChange","filterMovies","moviesFiltered","includes","toLowerCase","key","NewMovie","NotFound","Header","App","routes","path","component","render","exact","ReactDOM","basename","process","document","getElementById"],"mappings":"iWAUeA,E,4JAPb,WACE,OACE,yBAAKC,UAAU,oBAAf,qB,GAHgBC,a,gBC+LPC,E,kDA7Lb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAL,eAAkBD,EAAME,OACxB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,gDAMnB,YAEEC,EADqBC,KAAKN,MAAlBK,UACCC,KAAKL,S,yBAGhB,SAAYM,EAAOC,GACjBF,KAAKG,SAAL,eAAiBF,EAAQC,M,8BAG3B,WAAoB,IAAD,OACTE,EAAUJ,KAAKL,MAAfS,MAER,OACE,6BACE,2BAAOb,UAAU,YAAYc,QAAQ,eAArC,YAEE,6BACA,2BACEC,YAAY,qBACZC,GAAG,cACHC,KAAK,OACLjB,UAAU,WACVkB,MAAQL,EACRM,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,QAASD,EAAME,OAAOJ,c,iCAOvE,WAAuB,IAAD,OACZK,EAAad,KAAKL,MAAlBmB,SAER,OACE,6BACE,2BAAOvB,UAAU,YAAYc,QAAQ,kBAArC,eAEE,6BACA,2BACEd,UAAU,WACVe,YAAY,wBACZC,GAAG,iBACHC,KAAK,OACLC,MAAQK,EACRJ,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,WAAYD,EAAME,OAAOJ,c,kCAO1E,WAAwB,IAAD,OACbM,EAAcf,KAAKL,MAAnBoB,UAER,OACE,yBAAKxB,UAAU,OACb,2BAAOA,UAAU,YAAYc,QAAQ,eAArC,SAEE,6BACA,2BACEd,UAAU,WACVe,YAAY,6BACZC,GAAG,cACHC,KAAK,OACLC,MAAQM,EACRL,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,YAAaD,EAAME,OAAOJ,c,kCAO3E,WAAwB,IAAD,OACbO,EAAchB,KAAKL,MAAnBqB,UAER,OACE,6BACE,2BAAOzB,UAAU,YAAYc,QAAQ,mBAArC,UAEE,6BACA,8BACEd,UAAU,eACV0B,KAAK,IACLV,GAAG,kBACHE,MAAQO,EACRN,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,YAAaD,EAAME,OAAOJ,c,kCAO3E,WAAwB,IAAD,OACbS,EAAUlB,KAAKL,MAAfuB,MACR,OACE,6BACE,2BAAO3B,UAAU,YAAYc,QAAQ,eAArC,YAEE,6BACA,4BACEd,UAAU,WACVgB,GAAG,cACHE,MAAQS,EACRR,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,QAASD,EAAME,OAAOJ,SAE7D,4BAAQA,MAAM,UAAd,cACA,4BAAQA,MAAM,UAAd,cACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,iB,+BAOV,WAAqB,IAAD,OACVU,EAAWnB,KAAKL,MAAhBwB,OACR,OACE,6BACE,2BAAO5B,UAAU,YAAYc,QAAQ,gBAArC,kBAEE,6BACA,2BACEd,UAAU,WACVe,YAAY,mCACZC,GAAG,eACHC,KAAK,SACLY,KAAO,GACPC,IAAM,EACNC,IAAM,EACNb,MAAQU,EACRT,SAAW,SAACC,GAAD,OAAW,EAAKC,YAAY,SAAUD,EAAME,OAAOJ,c,gCAOxE,WACE,OACE,6BACE,4BACElB,UAAU,eACViB,KAAK,SACLe,QAAUvB,KAAKH,cAHjB,a,oBAWN,WACE,OACE,6BACE,0BAAMN,UAAU,YACbS,KAAKwB,mBACLxB,KAAKyB,sBACLzB,KAAK0B,uBACL1B,KAAK2B,uBACL3B,KAAK4B,uBACL5B,KAAK6B,oBACL7B,KAAK8B,2B,GAzKQC,IAAMvC,W,OC0BfwC,E,4JAxBb,WAAU,IAAD,EACgDhC,KAAKN,MAApDE,MAASW,EADV,EACUA,GAAIH,EADd,EACcA,MAAOY,EADrB,EACqBA,UAAWD,EADhC,EACgCA,UACvC,OACE,yBAAKxB,UAAU,YAAY0C,cAAY,cACrC,yBAAK1C,UAAU,YACb,yBAAK2C,IAAMnB,EAAYoB,IAAM/B,IAC7B,4BAAMA,IAER,uBAAGb,UAAU,iBAAkByB,GAC/B,kBAAC,IAAD,CAAMzB,UAAU,cAAc6C,GAAE,kBAAc7B,IAA9C,qB,GAVgBwB,IAAMvC,W,QCiDf6C,EArDA,CACb,CACE9B,GAAI,EACJH,MAAO,cACPU,SAAU,mBACVE,UAAW,iKACXG,OAAQ,IACRJ,UAAW,0CACXuB,YAAY,EACZpB,MAAO,UAET,CACEX,GAAI,EACJH,MAAO,gBACPU,SAAU,iBACVE,UAAW,4HACXG,OAAQ,IACRJ,UAAW,0CACXuB,YAAY,EACZpB,MAAO,WAET,CACEX,GAAI,EACJH,MAAO,qBACPU,SAAU,qBACVE,UAAW,qJACXG,OAAQ,EACRJ,UAAW,oCACXuB,YAAY,EACZpB,MAAO,UAET,CACEX,GAAI,EACJH,MAAO,kBACPU,SAAU,kBACVE,UAAW,2LACXG,OAAQ,IACRJ,UAAW,6BACXuB,YAAY,EACZpB,MAAO,UAET,CACEX,GAAI,EACJH,MAAO,gBACPU,SAAU,WACVE,UAAW,iKACXG,OAAQ,IACRJ,UAAW,oCACXuB,YAAY,EACZpB,MAAO,YC/CXqB,aAAaC,QAAQ,SAAUC,KAAKC,UAAUC,IAE9C,IAAMC,EAAa,kBAAMH,KAAKI,MAAMN,aAAaO,QAAQ,YACnDC,EAAa,SAACV,GAAD,OAAYE,aAAaC,QAAQ,SAAUC,KAAKC,UAAUL,KAYvEW,EAAkB,SAACC,GAAD,OAAc,SAACC,GACrCC,YAAW,WACTD,EAASD,KAZG,OAgBHG,EAAY,kBACvB,IAAIC,SAAQ,SAACC,GACX,IAAMjB,EAASO,IACfI,EAAgBX,EAAhBW,CAAwBM,OAIfC,EAAW,SAACC,GACvB,IAAM5D,EAAQgD,IAAaa,MAAK,SAACC,GAAD,OAASA,EAAInD,KAAOoD,SAASH,EAAS,OACtE,OAAO,IAAIH,SAAQ,SAACC,GAClBN,EAAgBpD,EAAhBoD,CAAuBM,OAId1C,EAAc,SAACgD,GAAD,OACzB,IAAIP,SAAQ,SAACC,GACX,IAAMjB,EAASO,IAAaiB,KAAI,SAACjE,GAC/B,OAAIA,EAAMW,KAAOoD,SAASC,EAAarD,GAAI,IAClC,2BAAKX,GAAUgE,GAEjBhE,KAETmD,EAAWV,GACXW,EAtCmB,KAsCnBA,CAAgCM,OAIvBQ,EAAc,SAACC,GAAD,OACzB,IAAIV,SAAQ,SAACC,GACX,IAAIjB,EAASO,IACPoB,EAAS3B,EAAOA,EAAO4B,OAAS,GAAG1D,GAAK,EACxC2D,EAAQ,2BAAQH,GAAR,IAAmBxD,GAAIyD,IACrC3B,EAAM,sBAAOA,GAAP,CAAe6B,IACrBnB,EAAWV,GACXW,EAjDmB,KAiDnBA,CAAgCM,OAIvBa,EAAc,SAACX,GAC1B,IAAInB,EAASO,IAIb,OAHAP,EAASA,EAAO+B,QAAO,SAACxE,GAAD,OAAWA,EAAMW,KAAOoD,SAASH,EAAS,OACjET,EAAWV,GAEJ,IAAIgB,SAAQ,SAACC,GAClBN,EAAgB,CAAEqB,OA3DC,MA2DnBrB,CAA4CM,OCXjCgB,E,kDA9Cb,WAAY5E,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACX4E,SAAS,EACTC,gBAAgB,EAChB5E,MAAO,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAPH,E,qDAUnB,WAAqB,IAAD,OACSS,EAAWP,KAAKN,MAAnC+E,MAASC,OAAUnE,GACNoE,EACZpE,GAAIqE,MAAK,SAACC,GACjB,EAAK1E,SAAS,CACZP,MAAOiF,IACN,kBAAM,EAAK1E,SAAS,CAAEoE,SAAS,Y,0BAItC,SAAaX,GAAe,IAAD,OACDe,EACZf,GAAcgB,MAAK,kBAAM,EAAKzE,SAAS,CAAEqE,gBAAgB,S,oBAGvE,WAAU,IAAD,EACoCxE,KAAKL,MAAxC4E,EADD,EACCA,QAASC,EADV,EACUA,eAAgB5E,EAD1B,EAC0BA,MAEjC,OAAI4E,EAAuB,kBAAC,IAAD,CAAUpC,GAAG,MAEpCmC,EAAgB,kBAAC,EAAD,MAGlB,yBAAKhF,UAAU,YAAY0C,cAAY,cACrC,4CACA,kBAAC,EAAD,CAAWrC,MAAQA,EAAQG,SAAWC,KAAKH,oB,GApC3BL,aC8DTsF,E,kDA/Db,aAAe,IAAD,8BACZ,gBAEKnF,MAAQ,CACXC,MAAO,GACP2E,SAAS,GAEX,EAAKJ,YAAc,EAAKA,YAAYrE,KAAjB,gBAPP,E,qDAUd,WAAqB,IAAD,OACSS,EAAWP,KAAKN,MAAnC+E,MAASC,OAAUnE,GACNoE,EACZpE,GAAIqE,MAAK,SAACC,GACjB,EAAK1E,SAAS,CACZP,MAAOiF,IACN,kBAAM,EAAK1E,SAAS,CAAEoE,SAAS,Y,yBAItC,WAAe,IACchE,EAAWP,KAAKN,MAAnC+E,MAASC,OAAUnE,GACnB4D,EAAgBQ,EACxBR,EAAY5D,K,oBAGd,WAAU,IAAD,EACoBP,KAAKL,MAAxBC,EADD,EACCA,MAAO2E,EADR,EACQA,QACPhE,EAA6DX,EAA7DW,GAAIH,EAAyDR,EAAzDQ,MAAOY,EAAkDpB,EAAlDoB,UAAWD,EAAuCnB,EAAvCmB,UAAWG,EAA4BtB,EAA5BsB,MAAOC,EAAqBvB,EAArBuB,OAAQL,EAAalB,EAAbkB,SAExD,OAAIyD,EAAgB,kBAAC,EAAD,MAGlB,yBAAKhF,UAAU,cAAc0C,cAAY,iBACvC,yBAAKE,IAAI,cAAcD,IAAG,aAASnB,KACnC,yBAAKxB,UAAU,iBACb,4CAAea,IACf,+CAAkBU,IAClB,gDAAmBE,IACnB,4CAAeE,IACf,6CAAgBC,KAElB,yBAAK5B,UAAU,wBACb,kBAAC,IAAD,CAAMA,UAAU,SAAS6C,GAAG,KAA5B,UACA,kBAAC,IAAD,CAAM7C,UAAU,SAAS6C,GAAE,kBAAc7B,EAAd,UAA3B,UACA,kBAAC,IAAD,CACEgB,QAAUvB,KAAKmE,YACf5E,UAAU,SACV6C,GAAG,KAHL,iB,GA9CiB5C,aC2DZuF,E,4JA7Db,WAAU,IAAD,EAQH/E,KAAKN,MANPsF,EAFK,EAELA,WACAC,EAHK,EAGLA,mBACAC,EAJK,EAILA,eACAC,EALK,EAKLA,mBACAC,EANK,EAMLA,cACAC,EAPK,EAOLA,sBAGF,OACE,0BAAM9F,UAAU,eAAe0C,cAAY,kBAAkBqD,OAAO,IAClE,8CACA,2BAAOjF,QAAQ,aAAa4B,cAAY,oBAAxC,kBAEE,2BACEzB,KAAK,OACL+E,KAAK,aACL9E,MAAQuE,EACRtE,SAAWuE,EACXhD,cAAY,gBAGhB,2BAAO5B,QAAQ,iBAAiB4B,cAAY,wBAA5C,4BAEE,2BACEzB,KAAK,WACL+E,KAAK,iBACLC,QAAUN,EACVxE,SAAWyE,EACXlD,cAAY,oBAGhB,2BAAO5B,QAAQ,gBAAgB4B,cAAY,sBAA3C,wBAEE,4BACEsD,KAAK,gBACL9E,MAAQ2E,EACR1E,SAAW2E,EACXpD,cAAY,gBAEZ,4BAAQA,cAAY,gBAAgBxB,MAAM,IAA1C,SACA,4BAAQwB,cAAY,gBAAgBxB,MAAM,UAA1C,cACA,4BAAQwB,cAAY,gBAAgBxB,MAAM,UAA1C,cACA,4BAAQwB,cAAY,gBAAgBxB,MAAM,YAA1C,mB,GA7CYsB,IAAMvC,WCkFfiG,E,kDA5Eb,aAAe,IAAD,8BACZ,gBAEK9F,MAAQ,CACX0C,OAAQ,GACRqD,SAAU,GACVnB,SAAS,EACTS,WAAY,GACZE,gBAAgB,EAChBE,cAAe,IAGjB,EAAKO,aAAe,EAAKA,aAAa7F,KAAlB,gBACpB,EAAK8F,aAAe,EAAKA,aAAa9F,KAAlB,gBAbR,E,qDAgBd,WAAqB,IAAD,OACI6E,IACVC,MAAK,SAACC,GAChB,EAAK1E,SAAS,CACZkC,OAAQwC,EACRa,SAAUb,IACT,kBAAM,EAAK1E,SAAS,CAAEoE,SAAS,Y,0BAItC,YAA0B,IAAD,OAAV1D,EAAU,EAAVA,OACL0E,EAAS1E,EAAT0E,KACF9E,EAAwB,aAAhBI,EAAOL,KAAsBK,EAAO2E,QAAU3E,EAAOJ,MACnET,KAAKG,SAAL,eACGoF,EAAO9E,IACP,kBAAM,EAAKmF,oB,0BAGhB,WAAgB,IAAD,EACmD5F,KAAKL,MAA7DqF,EADK,EACLA,WAAYE,EADP,EACOA,eAAgBE,EADvB,EACuBA,cAChCS,EAFS,EACsCH,SACrBtB,QAAO,SAACxE,GAAD,OAAWA,EAAMQ,MAAM0F,SAASd,IAChEpF,EAAMkB,SAASgF,SAASd,EAAWe,gBACnCnG,EAAMoB,UAAU8E,SAASd,EAAWe,mBAClB,IAAnBb,IACFW,EAAiBA,EAAezB,QAAO,SAACxE,GAAD,OAAgC,IAArBA,EAAM0C,eAE1DuD,EAAiBA,EAAezB,QAC9B,SAACxE,GAAD,OAAWA,EAAMsB,MAAM4E,SAASV,MAGlCpF,KAAKG,SAAS,CACZkC,OAAQwD,M,oBAIZ,WAAU,IAAD,EACgE7F,KAAKL,MAApE0C,EADD,EACCA,OAAQkC,EADT,EACSA,QAASS,EADlB,EACkBA,WAAYE,EAD9B,EAC8BA,eAAgBE,EAD9C,EAC8CA,cAGrD,OAAIb,EAAgB,kBAAC,EAAD,MAGlB,yBAAKtC,cAAY,cACf,kBAAC,EAAD,CACE+C,WAAaA,EACbC,mBAAqBjF,KAAK2F,aAC1BT,eAAiBA,EACjBC,mBAAqBnF,KAAK2F,aAC1BP,cAAgBA,EAChBC,sBAAwBrF,KAAK2F,eAE/B,kBAAC,IAAD,CAAMpG,UAAU,WAAW6C,GAAG,eAA9B,uBACA,yBAAK7C,UAAU,aACZ8C,EAAOwB,KAAI,SAACjE,GAAD,OAAW,kBAAC,EAAD,CAAWoG,IAAMpG,EAAMQ,MAAQR,MAAQA,a,GAtEhDJ,aCuBTyG,E,kDAzBb,WAAYvG,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACX6E,gBAAgB,GAElB,EAAK3E,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,gDAQnB,SAAaoE,GAAW,IAAD,OACGS,EACZT,GAAUU,MAAK,kBAAM,EAAKzE,SAAS,CAAEqE,gBAAgB,S,oBAGnE,WAEE,OAD2BxE,KAAKL,MAAxB6E,eACmB,kBAAC,IAAD,CAAUpC,GAAG,MAGtC,yBAAK7C,UAAU,eAAe0C,cAAY,aACxC,+CACA,kBAAC,EAAD,CAAWlC,SAAWC,KAAKH,oB,GArBZL,aCER0G,E,4JALb,WACE,OAAO,yBAAKjE,cAAY,aAAjB,mC,GAFYzC,aCSR2G,E,4JAPb,WACE,OACE,gCAAQ,kBAAC,IAAD,CAAM5G,UAAU,aAAa6C,GAAG,KAAhC,4B,GAHO5C,a,MCwBN4G,MAnBf,WAAgB,IACNX,EAA2DY,EAAhDJ,EAAgDI,EAAtC/B,EAAsC+B,EAA3BvB,EAA2BuB,EAAbH,EAAaG,EACnE,OACE,8BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAYN,IACtC,kBAAC,IAAD,CACEK,KAAK,mBACLE,OAAS,SAAC9G,GAAD,OAAW,kBAAC4E,EAAe5E,MAEtC,kBAAC,IAAD,CAAO4G,KAAK,cAAcE,OAAS,SAAC9G,GAAD,OAAW,kBAACoF,EAAkBpF,MACjE,kBAAC,IAAD,CAAO+G,OAAK,EAACH,KAAK,IAAIC,UAAYd,IAClC,kBAAC,IAAD,CAAOgB,OAAK,EAACH,KAAK,IAAIC,UAAYL,OCf1CQ,IAASF,OACL,kBAAC,IAAD,CAAeG,SAAWC,uBACtB,kBAAC,EAAD,OACcC,SAASC,eAAe,W","file":"static/js/main.da7dab71.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loadingComponent\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label className=\"labelForm\" htmlFor=\"movie_title\">\n          Título\n          <br />\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label className=\"labelForm\" htmlFor=\"movie_subtitle\">\n          Subtítulo\n          <br />\n          <input\n            className=\"validate\"\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label className=\"labelForm\" htmlFor=\"movie_image\">\n          Imagem\n          <br />\n          <input\n            className=\"validate\"\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label className=\"labelForm\" htmlFor=\"movie_storyline\">\n          Sinopse\n          <br />\n          <textarea\n            className=\"textareaEdit\"\n            rows=\"5\"\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label className=\"labelForm\" htmlFor=\"movie_genre\">\n          Gênero\n          <br />\n          <select\n            className=\"validate\"\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label className=\"labelForm\" htmlFor=\"movie_rating\">\n          Avaliação\n          <br />\n          <input\n            className=\"validate\"\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          className=\"submitButton\"\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"editForm\">\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n    bookmarked: PropTypes.bool,\n    genre: PropTypes.string,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie: { id, title, storyline, imagePath } } = this.props;\n    return (\n      <div className=\"movieCard\" data-testid=\"movie-card\">\n        <div className=\"cardHead\">\n          <img src={ imagePath } alt={ title } />\n          <h1>{ title }</h1>\n        </div>\n        <p className=\"cardStoryline\">{ storyline }</p>\n        <Link className=\"cardDetails\" to={ `/movies/${id}` }>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\n\nimport { MovieForm } from '../components';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      shouldRedirect: false,\n      movie: {},\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    const { getMovie } = movieAPI;\n    getMovie(id).then((res) => {\n      this.setState({\n        movie: res,\n      }, () => this.setState({ loading: false }));\n    });\n  }\n\n  handleSubmit(updatedMovie) {\n    const { updateMovie } = movieAPI;\n    updateMovie(updatedMovie).then(() => this.setState({ shouldRedirect: true }));\n  }\n\n  render() {\n    const { loading, shouldRedirect, movie } = this.state;\n\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    if (loading) return <Loading />;\n\n    return (\n      <div className=\"editMovie\" data-testid=\"edit-movie\">\n        <h2>Editar Filme</h2>\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movie: {},\n      loading: true,\n    };\n    this.deleteMovie = this.deleteMovie.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    const { getMovie } = movieAPI;\n    getMovie(id).then((res) => {\n      this.setState({\n        movie: res,\n      }, () => this.setState({ loading: false }));\n    });\n  }\n\n  deleteMovie() {\n    const { match: { params: { id } } } = this.props;\n    const { deleteMovie } = movieAPI;\n    deleteMovie(id);\n  }\n\n  render() {\n    const { movie, loading } = this.state;\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = movie;\n\n    if (loading) return <Loading />;\n\n    return (\n      <div className=\"movieDetail\" data-testid=\"movie-details\">\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <div className=\"detailcontent\">\n          <p>{ `Title: ${title}` }</p>\n          <p>{ `Subtitle: ${subtitle}` }</p>\n          <p>{ `Storyline: ${storyline}` }</p>\n          <p>{ `Genre: ${genre}` }</p>\n          <p>{ `Rating: ${rating}` }</p>\n        </div>\n        <div className=\"detailcontentActions\">\n          <Link className=\"button\" to=\"/\">VOLTAR</Link>\n          <Link className=\"button\" to={ `/movies/${id}/edit` }>EDITAR</Link>\n          <Link\n            onClick={ this.deleteMovie }\n            className=\"button\"\n            to=\"/\"\n          >\n            DELETAR\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default MovieDetails;\n","// implement SearchBar component here\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  render() {\n    const {\n      searchText,\n      onSearchTextChange,\n      bookmarkedOnly,\n      onBookmarkedChange,\n      selectedGenre,\n      onSelectedGenreChange,\n    } = this.props;\n\n    return (\n      <form className=\"filterMovies\" data-testid=\"search-bar-form\" action=\"\">\n        <h2>Filtrar Filmes</h2>\n        <label htmlFor=\"searchText\" data-testid=\"text-input-label\">\n          Inclui o texto:\n          <input\n            type=\"text\"\n            name=\"searchText\"\n            value={ searchText }\n            onChange={ onSearchTextChange }\n            data-testid=\"text-input\"\n          />\n        </label>\n        <label htmlFor=\"bookmarkedOnly\" data-testid=\"checkbox-input-label\">\n          Mostrar somente favoritos\n          <input\n            type=\"checkbox\"\n            name=\"bookmarkedOnly\"\n            checked={ bookmarkedOnly }\n            onChange={ onBookmarkedChange }\n            data-testid=\"checkbox-input\"\n          />\n        </label>\n        <label htmlFor=\"selectedGenre\" data-testid=\"select-input-label\">\n          Filtrar por gênero\n          <select\n            name=\"selectedGenre\"\n            value={ selectedGenre }\n            onChange={ onSelectedGenreChange }\n            data-testid=\"select-input\"\n          >\n            <option data-testid=\"select-option\" value=\"\">Todos</option>\n            <option data-testid=\"select-option\" value=\"action\">Ação</option>\n            <option data-testid=\"select-option\" value=\"comedy\">Comédia</option>\n            <option data-testid=\"select-option\" value=\"thriller\">Suspense</option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\n\nimport * as movieAPI from '../services/movieAPI';\nimport SearchBar from '../components/SearchBar';\n\nimport Loading from '../components/Loading';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      fullList: [],\n      loading: true,\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.filterMovies = this.filterMovies.bind(this);\n  }\n\n  componentDidMount() {\n    const { getMovies } = movieAPI;\n    getMovies().then((res) => {\n      this.setState({\n        movies: res,\n        fullList: res,\n      }, () => this.setState({ loading: false }));\n    });\n  }\n\n  handleChange({ target }) {\n    const { name } = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    this.setState({\n      [name]: value,\n    }, () => this.filterMovies());\n  }\n\n  filterMovies() {\n    const { searchText, bookmarkedOnly, selectedGenre, fullList } = this.state;\n    let moviesFiltered = fullList.filter((movie) => movie.title.includes(searchText)\n      || movie.subtitle.includes(searchText.toLowerCase())\n      || movie.storyline.includes(searchText.toLowerCase()));\n    if (bookmarkedOnly === true) {\n      moviesFiltered = moviesFiltered.filter((movie) => movie.bookmarked === true);\n    }\n    moviesFiltered = moviesFiltered.filter(\n      (movie) => movie.genre.includes(selectedGenre),\n    );\n\n    this.setState({\n      movies: moviesFiltered,\n    });\n  }\n\n  render() {\n    const { movies, loading, searchText, bookmarkedOnly, selectedGenre } = this.state;\n\n    // Render Loading here if the request is still happening\n    if (loading) return <Loading />;\n\n    return (\n      <div data-testid=\"movie-list\">\n        <SearchBar\n          searchText={ searchText }\n          onSearchTextChange={ this.handleChange }\n          bookmarkedOnly={ bookmarkedOnly }\n          onBookmarkedChange={ this.handleChange }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.handleChange }\n        />\n        <Link className=\"addMovie\" to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n        <div className=\"movieList\">\n          {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    const { createMovie } = movieAPI;\n    createMovie(newMovie).then(() => this.setState({ shouldRedirect: true }));\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    return (\n      <div className=\"newMovieForm\" data-testid=\"new-movie\">\n        <h2>Adicionar Filme</h2>\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header><Link className=\"backToHome\" to=\"/\">Movie Cards Library</Link></header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport * as routes from './pages/index';\nimport Header from './components/Header';\n\nimport './App.css';\n\nfunction App() {\n  const { MovieList, NewMovie, EditMovie, MovieDetails, NotFound } = routes;\n  return (\n    <main>\n      <Header />\n      <Switch>\n        <Route path=\"/movies/new\" component={ NewMovie } />\n        <Route\n          path=\"/movies/:id/edit\"\n          render={ (props) => <EditMovie { ...props } /> }\n        />\n        <Route path=\"/movies/:id\" render={ (props) => <MovieDetails { ...props } /> } />\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route exact path=\"*\" component={ NotFound } />\n      </Switch>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n        <App />\n    </BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}